/*
gjcc@cin.ufpe.br: Modified to support Java 8:

Per Sreenivasa Viswanadha (as posted on the javacc user mailing list), the
original java 1.5 grammar is licensed under the BSD license, so this modified
grammar is also.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


options {
  /*UNICODE_INPUT = true;*/
  /*JAVA_UNICODE_ESCAPE = false;*/
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
}

PARSER_BEGIN(Java18MergeParser)
package de.ovgu.cide.fstgen.parsers.generated_java18_merge;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class Java18MergeParser extends AbstractFSTParser
{
 	public Java18MergeParser(){}
}

PARSER_END(Java18MergeParser)


/********************************************
 * THE JAVA TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
/*| "\ufffd"*/
}

/* COMMENTS */

MORE :
{
  "//" { input_stream.backup(2); } : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}


TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >      
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   
|
  < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >      
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >

}


TOKEN :
{
		/*< RUNSIGNEDSHIFT: ">>>" >
		{
		matchedToken.kind = GT;
		((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
		input_stream.backup(2);
		}
		| < RSIGNEDSHIFT: ">>" >
		{
		matchedToken.kind = GT;
		((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
		input_stream.backup(1);
		}
		|*/
		< GT: ">" >
}
FSTInfo CompilationUnit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(( Annotation() )* "package") n=PackageDeclaration(inTerminal){ replaceName(n);}] (n=ImportDeclaration(inTerminal){ replaceName(n);})* (n=TypeDeclaration(inTerminal){ replaceName(n);})* <EOF> {return productionEndNonTerminal("CompilationUnit","-","-");}

 )  }

FSTInfo PackageDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(true){ replaceName(n);})* <PACKAGE> n=Name(true){ replaceName(n);} ";" {return productionEndTerminal("PackageDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IMPORT> ["static" ] n=Name(true){ replaceName("Name", n);}{ replaceName(n);} [n=ImportPackage(true){ replaceName("ImportPackage", n);}{ replaceName(n);}] ";" {return productionEndTerminal("ImportDeclaration","{Name}{ImportPackage}","{Name}{ImportPackage}","Replacement","Default",first,token);}

 )  }

FSTInfo ImportPackage(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	 "." "*" {return productionEndTerminal("ImportPackage","-",".*","Replacement","Default",first,token);}

 )  }

FSTInfo Modifiers(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(2) n=Modifier(true){ replaceName(n);})* {return productionEndTerminal("Modifiers","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Modifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PUBLIC>  {return productionEndTerminal("Modifier1","-","-","Replacement","Default",first,token);}
 |
	<STATIC>  {return productionEndTerminal("Modifier2","-","-","Replacement","Default",first,token);}
 |
	<PROTECTED>  {return productionEndTerminal("Modifier3","-","-","Replacement","Default",first,token);}
 |
	<PRIVATE>  {return productionEndTerminal("Modifier4","-","-","Replacement","Default",first,token);}
 |
	<FINAL>  {return productionEndTerminal("Modifier5","-","-","Replacement","Default",first,token);}
 |
	<ABSTRACT>  {return productionEndTerminal("Modifier6","-","-","Replacement","Default",first,token);}
 |
	<SYNCHRONIZED>  {return productionEndTerminal("Modifier7","-","-","Replacement","Default",first,token);}
 |
	<NATIVE>  {return productionEndTerminal("Modifier8","-","-","Replacement","Default",first,token);}
 |
	<TRANSIENT>  {return productionEndTerminal("Modifier9","-","-","Replacement","Default",first,token);}
 |
	<VOLATILE>  {return productionEndTerminal("Modifier10","-","-","Replacement","Default",first,token);}
 |
	<STRICTFP>  {return productionEndTerminal("Modifier11","-","-","Replacement","Default",first,token);}
 |
	<_DEFAULT>  {return productionEndTerminal("Modifier12","-","-","Replacement","Default",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("Modifier13","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo TypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyTypeDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} n=AnnotationTypeDeclaration(inTerminal){ replaceName("AnnotationTypeDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("AnnotationTypeDecl","{AnnotationTypeDeclaration}","{AnnotationTypeDeclaration}");}
 |
	LOOKAHEAD(Modifiers() "enum") n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" [n=EnumConstants(inTerminal){ replaceName(n);}] ["," ] [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("EnumDecl","{Id}","{Id}");}
 |
	n=Modifiers(inTerminal){ replaceName(n);} [n=FinalOrAbstract(inTerminal){ replaceName(n);}] n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] n=ClassOrInterfaceBody(inTerminal){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndNonTerminal("ClassOrInterfaceDecl","{Id}","{Id}");}

 )  }

FSTInfo ClassOrInterfaceDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=FinalOrAbstract(true){ replaceName(n);}] n=ClassOrInterface(true){ replaceName(n);} n=Id(true){ replaceName(n);} [n=TypeParameters(true){ replaceName(n);}] [n=ExtendsList(true){ replaceName(n);}] [n=ImplementsList(true){ replaceName(n);}] n=ClassOrInterfaceBody(true){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndTerminal("ClassOrInterfaceDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterface(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"class"  {return productionEndTerminal("ClassOrInterface","-","-","Replacement","Default",first,token);}
 |
	"interface"  {return productionEndTerminal("ClassOrInterface","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExtendsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceTypeAnnotation(true){ replaceName(n);} ("," n=ClassOrInterfaceTypeAnnotation(true){ replaceName(n);})* {return productionEndTerminal("ExtendsList","ExtndList","ExtndList","Replacement","Default",first,token);}

 )  }

FSTInfo ImplementsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"implements" n=ClassOrInterfaceTypeAnnotation(true){ replaceName(n);} ("," n=ClassOrInterfaceTypeAnnotation(true){ replaceName(n);})* {return productionEndTerminal("ImplementsList","ImplList","ImplList","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceTypeAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(true){ replaceName(n);})* n=ClassOrInterfaceType(true){ replaceName(n);} {return productionEndTerminal("ClassOrInterfaceTypeAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"enum" n=Id(true){ replaceName(n);} [n=ImplementsList(true){ replaceName(n);}] n=EnumBody(true){ replaceName(n);} {return productionEndTerminal("EnumDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=EnumConstants(true){ replaceName(n);}] ["," ] [n=EnumBodyInternal(true){ replaceName(n);}] "}" {return productionEndTerminal("EnumBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumBodyInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("EnumBodyInternal","-","-");}

 )  }

FSTInfo EnumConstants(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EnumConstant(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "," n=EnumConstant(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("EnumConstants","-","-");}

 )  }

FSTInfo EnumConstant(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(inTerminal){ replaceName(n);})* n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=Arguments(inTerminal){ replaceName(n);}] [n=ClassOrInterfaceBody(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("EnumConstant","{Id}","{Id}");}

 )  }

FSTInfo TypeParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" [n=TypeParameter(true){ replaceName(n);}] ("," n=TypeParameter(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeParameters","TypeParameters","TypeParameters","Replacement","LineBased",first,token);}

 )  }

FSTInfo TypeParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(true){ replaceName(n);})* n=Id(true){ replaceName(n);} [n=TypeBound(true){ replaceName(n);}] {return productionEndTerminal("TypeParameter","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeBound(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceType(true){ replaceName(n);} ("&" n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("TypeBound","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("ClassOrInterfaceBody","-","-");}

 )  }

FSTInfo ClassOrInterfaceBodyDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Initializer(true){ replaceName(n);} {return productionEndTerminal("InitializerDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Modifiers() ClassOrInterface()) n=Modifiers(inTerminal){ replaceName(n);} [n=FinalOrAbstract(inTerminal){ replaceName(n);}] n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] n=ClassOrInterfaceBody(inTerminal){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndNonTerminal("InnerClassDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() "enum") n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" [n=EnumConstants(inTerminal){ replaceName(n);}] ["," ] [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("InnerEnumDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() [ TypeParameters() ] Id() "(") n=Modifiers(inTerminal){ replaceName(n);} n=ConstructorDeclaration(inTerminal){ replaceName("ConstructorDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("ConstructorDecl","{ConstructorDeclaration}","{ConstructorDeclaration}");}
 |
	LOOKAHEAD( Modifiers() Type() Id() ( "[" "]" )* ( "," | "=" | ";" ) ) n=Modifiers(inTerminal){ replaceName(n);} n=FieldDeclaration(inTerminal){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("FieldDecl","{FieldDeclaration}","{FieldDeclaration}");}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} n=AnnotationTypeDeclaration(inTerminal){ replaceName("AnnotationTypeDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("InnerAnnotationTypeDecl","{AnnotationTypeDeclaration}","{AnnotationTypeDeclaration}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} n=MethodDeclaration(inTerminal){ replaceName("MethodDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("MethodDecl","{MethodDeclaration}","{MethodDeclaration}");}
 |
	";"  {return productionEndTerminal("EmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}

 )  }

FSTInfo FieldDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Type(inTerminal){ replaceName(n);} n=VariableDeclarator(inTerminal){ replaceName("VariableDeclarator", n);}{ replaceName(n);} ("," n=VariableDeclarator(inTerminal){ replaceName("VariableDeclarator", n);}{ replaceName(n);})* ";" {return productionEndNonTerminal("FieldDeclaration","-","{VariableDeclarator}");}

 )  }

FSTInfo VariableDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableDeclaratorId(inTerminal){ replaceName("VariableDeclaratorId", n);}{ replaceName(n);} ["=" n=VariableInitializer(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("VariableDeclarator","{VariableDeclaratorId}","{VariableDeclaratorId}");}

 )  }

FSTInfo VariableDeclaratorId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Id(true){ replaceName("Id", n);}{ replaceName(n);} "." <THIS> {return productionEndTerminal("VariableDeclaratorId1","-","{Id}","Replacement","Default",first,token);}
 |
	<THIS> {return productionEndTerminal("VariableDeclaratorId2","-","{Id}","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} ("[" "]" )* {return productionEndTerminal("VariableDeclaratorId3","-","{Id}","Replacement","Default",first,token);}

 )  }

FSTInfo VariableInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayInitializer(inTerminal){ replaceName(n);} {return productionEndNonTerminal("VariableInitializerArray","-","-");}
 |
	n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("VariableInitializerExpression","-","-");}

 )  }

FSTInfo ArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=ArrayInitializerInternal(true){ replaceName(n);}] ["," ] "}" {return productionEndTerminal("ArrayInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArrayInitializerInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableInitializer(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "," n=VariableInitializer(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ArrayInitializerInternal","-","-");}

 )  }

FSTInfo MethodDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=TypeParameters(inTerminal){ replaceName(n);}] n=ResultType(inTerminal){ replaceName(n);} n=MethodDeclarator(inTerminal){ replaceName("MethodDeclarator", n);}{ replaceName(n);} ["throws" n=NameList(inTerminal){ replaceName(n);}] n=MethodDeclarationBody(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MethodDeclaration","-","{MethodDeclarator}");}

 )  }

FSTInfo MethodDeclarationBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Block(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MethodDeclarationBodyBlock","-","-");}
 |
	";"  {return productionEndNonTerminal("MethodDeclarationBodyNone","-","-");}

 )  }

FSTInfo MethodDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} ("[" "]" )* {return productionEndTerminal("MethodDeclarator","{Id}({FormalParameters})","{Id}({FormalParameters})","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=FormalParametersInternal(true){ replaceName("FormalParametersInternal", n);}{ replaceName(n);}] ")" {return productionEndTerminal("FormalParameters","-","{FormalParametersInternal}","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParametersInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);} ("," n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);})* {return productionEndTerminal("FormalParametersInternal","-","{FormalParameter}^-","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Modifiers(true){ replaceName(n);} (n=FinalOrAnnotation(true){ replaceName(n);})* n=Type(true){ replaceName("Type", n);}{ replaceName(n);} ["..." ] n=VariableDeclaratorId(true){ replaceName(n);} {return productionEndTerminal("FormalParameter","-","{Type}","Replacement","Default",first,token);}

 )  }

FSTInfo FinalOrAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"final"  {return productionEndTerminal("FinalOrAnnotation1","-","-","Replacement","Default",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("FinalOrAnnotation2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConstructorDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(Annotation()) n=Annotation(inTerminal){ replaceName(n);}] [n=TypeParameters(inTerminal){ replaceName(n);}] n=ConstructorDeclarator(inTerminal){ replaceName("ConstructorDeclarator", n);}{ replaceName(n);} ["throws" n=NameList(inTerminal){ replaceName(n);}] n=ConstructorDeclarationBody(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ConstructorDeclaration","-","{ConstructorDeclarator})");}

 )  }

FSTInfo ConstructorDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} {return productionEndTerminal("ConstructorDeclarator","{Id}({FormalParameters})","{Id}({FormalParameters})","Replacement","Default",first,token);}

 )  }

FSTInfo ExplicitConstructorInvocation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("this" Arguments() ";") "this" n=Arguments(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("ExplicitConstructorInvocationThisArguments","-","-");}
 |
	LOOKAHEAD(TypeArguments() "this" Arguments() ";") n=TypeArguments(inTerminal){ replaceName(n);} "this" n=Arguments(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("ExplicitConstructorInvocationThisTypeArguments","-","-");}
 |
	[LOOKAHEAD(PrimaryExpression() ".") n=PrimaryExpression(inTerminal){ replaceName(n);} "."] [n=TypeArguments(inTerminal){ replaceName(n);}] "super" n=Arguments(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("ExplicitConstructorInvocationSuper","-","-");}

 )  }

FSTInfo ConstructorDeclarationBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [LOOKAHEAD(ExplicitConstructorInvocation()) n=ExplicitConstructorInvocation(inTerminal){ replaceName(n);}] (n=BlockStatement(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("ConstructorDeclarationBody","-","-");}

 )  }

FSTInfo Initializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["static" ] n=Block(true){ replaceName(n);} {return productionEndTerminal("Initializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=ReferenceType(true){ replaceName(n);} {return productionEndTerminal("Type1","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("Type2","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo ReferenceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) n=PrimitiveType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )+ {return productionEndTerminal("ReferenceType1","-","-","Replacement","Default",first,token);}
 |
	n=ClassOrInterfaceType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )* {return productionEndTerminal("ReferenceType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] (LOOKAHEAD(2) n=ClassOrInterfaceTypeInternal(true){ replaceName(n);})* {return productionEndTerminal("ClassOrInterfaceType","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceTypeInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." n=Id(true){ replaceName(n);} [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] {return productionEndTerminal("ClassOrInterfaceTypeInternal","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeArguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DIAMOND> {return productionEndTerminal("TypeArguments1","-","-","Replacement","Default",first,token);}
 |
	"<" n=TypeArgument(true){ replaceName(n);} ("," n=TypeArgument(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeArguments2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeArgument(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(true){ replaceName(n);})* n=ReferenceType(true){ replaceName(n);} {return productionEndTerminal("TypeArgument1","-","-","Replacement","Default",first,token);}
 |
	"?" [n=WildcardBounds(true){ replaceName(n);}] {return productionEndTerminal("TypeArgument2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WildcardBounds(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" (n=Annotation(true){ replaceName(n);})* n=ReferenceType(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds1","-","-","Replacement","Default",first,token);}
 |
	"super" (n=Annotation(true){ replaceName(n);})* n=ReferenceType(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimitiveType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"boolean"  {return productionEndTerminal("PrimitiveType1","-","-","Replacement","Default",first,token);}
 |
	"char"  {return productionEndTerminal("PrimitiveType2","-","-","Replacement","Default",first,token);}
 |
	"byte"  {return productionEndTerminal("PrimitiveType3","-","-","Replacement","Default",first,token);}
 |
	"short"  {return productionEndTerminal("PrimitiveType4","-","-","Replacement","Default",first,token);}
 |
	"int"  {return productionEndTerminal("PrimitiveType5","-","-","Replacement","Default",first,token);}
 |
	"long"  {return productionEndTerminal("PrimitiveType6","-","-","Replacement","Default",first,token);}
 |
	"float"  {return productionEndTerminal("PrimitiveType7","-","-","Replacement","Default",first,token);}
 |
	"double"  {return productionEndTerminal("PrimitiveType8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ResultType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"void"  {return productionEndTerminal("ResultType1","-","-","Replacement","Default",first,token);}
 |
	n=Type(true){ replaceName(n);} {return productionEndTerminal("ResultType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName("Id", n);}{ replaceName(n);} (LOOKAHEAD(2) "." n=Id(true){ replaceName("Id", n);}{ replaceName(n);})* {return productionEndTerminal("Name","-","{Id}^.","Replacement","Default",first,token);}

 )  }

FSTInfo NameList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=NameListAnnotation(true){ replaceName(n);} ("," n=NameListAnnotation(true){ replaceName(n);})* {return productionEndTerminal("NameList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NameListAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Annotation(true){ replaceName(n);})* n=Name(true){ replaceName(n);} {return productionEndTerminal("NameListAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Expression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalExpression(inTerminal){ replaceName(n);} [LOOKAHEAD(2) n=AssignmentExpression(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("Expression","-","-");}

 )  }

FSTInfo AssignmentExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssignmentOperator(inTerminal){ replaceName(n);} n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AssignmentExpression","-","-");}

 )  }

FSTInfo AssignmentOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("AssignmentOperator1","-","-","Replacement","Default",first,token);}
 |
	"*="  {return productionEndTerminal("AssignmentOperator2","-","-","Replacement","Default",first,token);}
 |
	"/="  {return productionEndTerminal("AssignmentOperator3","-","-","Replacement","Default",first,token);}
 |
	"%="  {return productionEndTerminal("AssignmentOperator4","-","-","Replacement","Default",first,token);}
 |
	"+="  {return productionEndTerminal("AssignmentOperator5","-","-","Replacement","Default",first,token);}
 |
	"-="  {return productionEndTerminal("AssignmentOperator6","-","-","Replacement","Default",first,token);}
 |
	"<<="  {return productionEndTerminal("AssignmentOperator7","-","-","Replacement","Default",first,token);}
 |
	">>="  {return productionEndTerminal("AssignmentOperator8","-","-","Replacement","Default",first,token);}
 |
	">>>="  {return productionEndTerminal("AssignmentOperator9","-","-","Replacement","Default",first,token);}
 |
	"&="  {return productionEndTerminal("AssignmentOperator10","-","-","Replacement","Default",first,token);}
 |
	"^="  {return productionEndTerminal("AssignmentOperator11","-","-","Replacement","Default",first,token);}
 |
	"|="  {return productionEndTerminal("AssignmentOperator12","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(ConditionalOrExpression() "?") n=ShortIf(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ConditionalExpression1","-","-");}
 |
	n=ConditionalOrExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ConditionalExpression2","-","-");}

 )  }

FSTInfo ShortIf(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShortIfInternal(inTerminal){ replaceName(n);} ":" n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ShortIf","-","-");}

 )  }

FSTInfo ShortIfInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalOrExpression(inTerminal){ replaceName(n);} "?" n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ShortIfInternal","-","-");}

 )  }

FSTInfo ConditionalOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalAndExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "||" n=ConditionalAndExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ConditionalOrExpression","-","-");}

 )  }

FSTInfo ConditionalAndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InclusiveOrExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "&&" n=InclusiveOrExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ConditionalAndExpression","-","-");}

 )  }

FSTInfo InclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ExclusiveOrExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "|" n=ExclusiveOrExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("InclusiveOrExpression","-","-");}

 )  }

FSTInfo ExclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AndExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "^" n=AndExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ExclusiveOrExpression","-","-");}

 )  }

FSTInfo AndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "&" n=EqualityExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("AndExpression","-","-");}

 )  }

FSTInfo EqualityExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InstanceOfExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=EqualityExpressionInternal(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("EqualityExpression","-","-");}

 )  }

FSTInfo EqualityExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityOp(inTerminal){ replaceName(n);} n=InstanceOfExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("EqualityExpressionInternal","-","-");}

 )  }

FSTInfo EqualityOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"=="  {return productionEndTerminal("EqualityOp1","-","-","Replacement","Default",first,token);}
 |
	"!="  {return productionEndTerminal("EqualityOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InstanceOfExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalExpression(inTerminal){ replaceName(n);} [LOOKAHEAD(2) "instanceof" n=Type(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("InstanceOfExpression","-","-");}

 )  }

FSTInfo RelationalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=RelationalExpressionInternal(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("RelationalExpression","-","-");}

 )  }

FSTInfo RelationalExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalOp(inTerminal){ replaceName(n);} n=ShiftExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("RelationalExpressionInternal","-","-");}

 )  }

FSTInfo RelationalOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<"  {return productionEndTerminal("RelationalOp1","-","-","Replacement","Default",first,token);}
 |
	">"  {return productionEndTerminal("RelationalOp2","-","-","Replacement","Default",first,token);}
 |
	"<="  {return productionEndTerminal("RelationalOp3","-","-","Replacement","Default",first,token);}
 |
	">="  {return productionEndTerminal("RelationalOp4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ShiftExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=ShiftExpressionInternal(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ShiftExpression","-","-");}

 )  }

FSTInfo ShiftExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftOp(inTerminal){ replaceName(n);} n=AdditiveExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ShiftExpressionInternal","-","-");}

 )  }

FSTInfo ShiftOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<<"  {return productionEndTerminal("ShiftOp1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) ">" ">" ">"  {return productionEndTerminal("ShiftOp2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) ">" ">"  {return productionEndTerminal("ShiftOp3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=AdditiveExpressionInternal(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("AdditiveExpression","-","-");}

 )  }

FSTInfo AdditiveExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(inTerminal){ replaceName(n);} n=MultiplicativeExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AdditiveExpressionInternal","-","-");}

 )  }

FSTInfo AdditiveOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("AdditiveOp1","-","-","Replacement","Default",first,token);}
 |
	"-"  {return productionEndTerminal("AdditiveOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MultiplicativeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryExpression(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=MultiplicativeExpressionInternal(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("MultiplicativeExpression","-","-");}

 )  }

FSTInfo MultiplicativeExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeOp(inTerminal){ replaceName(n);} n=UnaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MultiplicativeExpressionInternal","-","-");}

 )  }

FSTInfo MultiplicativeOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*"  {return productionEndTerminal("MultiplicativeOp1","-","-","Replacement","Default",first,token);}
 |
	"/"  {return productionEndTerminal("MultiplicativeOp2","-","-","Replacement","Default",first,token);}
 |
	"%"  {return productionEndTerminal("MultiplicativeOp3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(inTerminal){ replaceName(n);} n=UnaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryExpressionAdditive","-","-");}
 |
	n=PreIncrementExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryPreIncrement","-","-");}
 |
	n=PreDecrementExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryPreDecrement","-","-");}
 |
	n=UnaryExpressionNotPlusMinus(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryExpNotPlusMinus","-","-");}

 )  }

FSTInfo PreIncrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++" n=PrimaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PreIncrementExpression","-","-");}

 )  }

FSTInfo PreDecrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"--" n=PrimaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PreDecrementExpression","-","-");}

 )  }

FSTInfo UnaryExpressionNotPlusMinus(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryOp(inTerminal){ replaceName(n);} n=UnaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryExpressionNotPlusMinusUnaryOp","-","-");}
 |
	LOOKAHEAD(CastLOOK_AHEAD()) n=CastExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryExpressionNotPlusMinusCastExpression","-","-");}
 |
	n=PostfixExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("UnaryExpressionNotPlusMinusPostfixExpression","-","-");}

 )  }

FSTInfo UnaryOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("UnaryOp1","-","-","Replacement","Default",first,token);}
 |
	"!"  {return productionEndTerminal("UnaryOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastLOOK_AHEAD(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("CastLOOK_AHEAD1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("(" Type() "[") "(" n=Type(true){ replaceName(n);} "[" "]" {return productionEndTerminal("CastLOOK_AHEAD2","-","-","Replacement","Default",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" n=CastLOOK_AHEADOp(true){ replaceName(n);} {return productionEndTerminal("CastLOOK_AHEAD3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastLOOK_AHEADOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("CastLOOK_AHEADOp1","-","-","Replacement","Default",first,token);}
 |
	"!"  {return productionEndTerminal("CastLOOK_AHEADOp2","-","-","Replacement","Default",first,token);}
 |
	"("  {return productionEndTerminal("CastLOOK_AHEADOp3","-","-","Replacement","Default",first,token);}
 |
	"this"  {return productionEndTerminal("CastLOOK_AHEADOp4","-","-","Replacement","Default",first,token);}
 |
	"super"  {return productionEndTerminal("CastLOOK_AHEADOp5","-","-","Replacement","Default",first,token);}
 |
	"new"  {return productionEndTerminal("CastLOOK_AHEADOp6","-","-","Replacement","Default",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("CastLOOK_AHEADOp7","-","-","Replacement","Default",first,token);}
 |
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("CastLOOK_AHEADOp8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PostfixExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryExpression(inTerminal){ replaceName(n);} [LOOKAHEAD(2) n=PostfixOp(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("PostfixExpression","-","-");}

 )  }

FSTInfo PostfixOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("PostfixOp1","-","-","Replacement","Default",first,token);}
 |
	"--"  {return productionEndTerminal("PostfixOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("(" (Annotation())* Type() ")") "(" (n=Annotation(inTerminal){ replaceName(n);})* n=Type(inTerminal){ replaceName(n);} ")" n=UnaryExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("CastExpression1","-","-");}
 |
	LOOKAHEAD("(" (Annotation())* Type() "&") "(" (n=Annotation(inTerminal){ replaceName(n);})* n=Type(inTerminal){ replaceName(n);} ("&" n=ReferenceType(inTerminal){ replaceName(n);})+ ")" n=UnaryExpressionNotPlusMinus(inTerminal){ replaceName(n);} {return productionEndNonTerminal("CastExpression2","-","-");}
 |
	"(" (n=Annotation(inTerminal){ replaceName(n);})* n=Type(inTerminal){ replaceName(n);} ")" n=UnaryExpressionNotPlusMinus(inTerminal){ replaceName(n);} {return productionEndNonTerminal("CastExpression3","-","-");}

 )  }

FSTInfo PrimaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryPrefix(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=PrimarySuffix(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("PrimaryExpression","-","-");}

 )  }

FSTInfo MemberSelector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." n=TypeArguments(true){ replaceName(n);} n=Id(true){ replaceName(n);} {return productionEndTerminal("MemberSelector1","-","-","Replacement","Default",first,token);}
 |
	n=MethodReference(true){ replaceName(n);} {return productionEndTerminal("MemberSelector2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodReference(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"::" n=NewOrIdentifier(true){ replaceName(n);} {return productionEndTerminal("MethodReference","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NewOrIdentifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"new"  {return productionEndTerminal("NewOrIdentifier1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("NewOrIdentifier2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimaryPrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "this"  {return productionEndTerminal("PrimaryPrefix2","-","-","Replacement","Default",first,token);}
 |
	"super"  {return productionEndTerminal("PrimaryPrefix3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD( "(" ")" "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix4","-","-");}
 |
	LOOKAHEAD( Id() "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix5","-","-");}
 |
	LOOKAHEAD( "(" VariableDeclaratorId() ")" "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix6","-","-");}
 |
	LOOKAHEAD( "(" VariableDeclaratorId() "," VariableDeclaratorId() ["," VariableDeclaratorId()] ")" "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix7","-","-");}
 |
	LOOKAHEAD( "(" FormalParameter() ")" "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix8","-","-");}
 |
	LOOKAHEAD( "(" FormalParameter() "," FormalParameter() ["," FormalParameter() ] ")" "->" ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix9","-","-");}
 |
	LOOKAHEAD( LambdaExpression() ) n=LambdaExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix10","-","-");}
 |
	LOOKAHEAD(3) "(" n=Expression(inTerminal){ replaceName(n);} ")" {return productionEndNonTerminal("PrimaryPrefix11","-","-");}
 |
	n=AllocationExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix12","-","-");}
 |
	LOOKAHEAD( ResultType() "." "class" ) n=ResultType(true){ replaceName(n);} "." "class" {return productionEndTerminal("PrimaryPrefix13","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD( Name() "::" ) n=Name(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix14","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD( ReferenceType() MethodReference() ) n=ReferenceType(inTerminal){ replaceName(n);} n=MethodReference(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimaryPrefix15","-","-");}
 |
	n=Name(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix16","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LambdaExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableDeclaratorId(inTerminal){ replaceName(n);} "->" n=ExpressionOrBlock(inTerminal){ replaceName(n);} {return productionEndNonTerminal("LambdaExpression1","-","-");}
 |
	LOOKAHEAD(3) n=FormalParameters(inTerminal){ replaceName(n);} "->" n=ExpressionOrBlock(inTerminal){ replaceName(n);} {return productionEndNonTerminal("LambdaExpression2","-","-");}
 |
	LOOKAHEAD(3) "(" n=VariableDeclaratorId(inTerminal){ replaceName(n);} ("," n=VariableDeclaratorId(inTerminal){ replaceName(n);})* ")" "->" n=ExpressionOrBlock(inTerminal){ replaceName(n);} {return productionEndNonTerminal("LambdaExpression3","-","-");}

 )  }

FSTInfo ExpressionOrBlock(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ExpressionOrBlock1","-","-");}
 |
	n=Block(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ExpressionOrBlock2","-","-");}

 )  }

FSTInfo PrimarySuffix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "." "this"  {return productionEndTerminal("PrimarySuffix1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "." "super"  {return productionEndTerminal("PrimarySuffix2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "." n=AllocationExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimarySuffix3","-","-");}
 |
	LOOKAHEAD(3) n=MemberSelector(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimarySuffix4","-","-");}
 |
	"[" n=Expression(inTerminal){ replaceName(n);} "]" {return productionEndNonTerminal("PrimarySuffix5","-","-");}
 |
	"." n=Id(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix6","-","-","Replacement","Default",first,token);}
 |
	n=Arguments(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PrimarySuffix7","-","-");}

 )  }

FSTInfo Literal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("Literal1","-","-","Replacement","Default",first,token);}
 |
	<FLOATING_POINT_LITERAL> {return productionEndTerminal("Literal2","-","-","Replacement","Default",first,token);}
 |
	<CHARACTER_LITERAL> {return productionEndTerminal("Literal3","-","-","Replacement","Default",first,token);}
 |
	<STRING_LITERAL> {return productionEndTerminal("Literal4","-","-","Replacement","Default",first,token);}
 |
	n=BooleanLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal5","-","-","Replacement","Default",first,token);}
 |
	n=NullLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal6","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BooleanLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"true"  {return productionEndTerminal("BooleanLiteral1","-","-","Replacement","Default",first,token);}
 |
	"false"  {return productionEndTerminal("BooleanLiteral2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NullLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"null"  {return productionEndTerminal("NullLiteral","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Arguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=ArgumentList(inTerminal){ replaceName(n);}] ")" {return productionEndNonTerminal("Arguments","-","-");}

 )  }

FSTInfo ArgumentList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(inTerminal){ replaceName(n);} ("," n=Expression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("ArgumentList","-","-");}

 )  }

FSTInfo AllocationExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) "new" (n=Annotation(inTerminal){ replaceName(n);})* n=PrimitiveType(inTerminal){ replaceName(n);} n=ArrayDimsAndInits(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AllocationExpressionArray","-","-");}
 |
	"new" (n=Annotation(inTerminal){ replaceName(n);})* n=ClassOrInterfaceType(inTerminal){ replaceName(n);} [n=TypeArguments(inTerminal){ replaceName(n);}] n=AllocationExpressionInit(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AllocationExpressionType","-","-");}

 )  }

FSTInfo AllocationExpressionInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayDimsAndInits(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AllocationExpressionInitArrayDimsAndInits","-","-");}
 |
	n=Arguments(inTerminal){ replaceName(n);} [n=ClassOrInterfaceBody(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("AllocationExpressionInitArguments","-","-");}

 )  }

FSTInfo ArrayDimsAndInits(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) (LOOKAHEAD(2) n=ArrayDims(inTerminal){ replaceName(n);})+ (LOOKAHEAD(2) "[" "]" )* {return productionEndNonTerminal("ArrayDimsAndInits1","-","-");}
 |
	("[" "]" )+ n=ArrayInitializer(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ArrayDimsAndInits2","-","-");}

 )  }

FSTInfo ArrayDims(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" n=Expression(inTerminal){ replaceName(n);} "]" {return productionEndNonTerminal("ArrayDims","-","-");}

 )  }

FSTInfo Statement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=LabeledStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("LabeledStmt","-","-");}
 |
	n=AssertStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("AssertStmt","-","-");}
 |
	n=Block(inTerminal){ replaceName(n);} {return productionEndNonTerminal("BlockStmt","-","-");}
 |
	n=EmptyStatement(true){ replaceName(n);} {return productionEndTerminal("EmptyStmt","-","-","Replacement","Default",first,token);}
 |
	n=StatementExpression(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("StatementExp","-","-");}
 |
	n=SwitchStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("SwitchStmt","-","-");}
 |
	n=IfStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("IfStmt","-","-");}
 |
	n=WhileStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("WhileStmt","-","-");}
 |
	n=DoStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("DoStmt","-","-");}
 |
	n=ForStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForStmt","-","-");}
 |
	n=BreakStatement(true){ replaceName(n);} {return productionEndTerminal("BreakStmt","-","-","Replacement","Default",first,token);}
 |
	n=ContinueStatement(true){ replaceName(n);} {return productionEndTerminal("ContinueStmt","-","-","Replacement","Default",first,token);}
 |
	n=ReturnStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ReturnStmt","-","-");}
 |
	n=ThrowStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ThrowStmt","-","-");}
 |
	n=SynchronizedStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("SynchronizedStmt","-","-");}
 |
	n=TryStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("TryStmt","-","-");}

 )  }

FSTInfo AssertStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"assert" n=Expression(inTerminal){ replaceName(n);} [":" n=Expression(inTerminal){ replaceName(n);}] ";" {return productionEndNonTerminal("AssertStatement","-","-");}

 )  }

FSTInfo LabeledStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(inTerminal){ replaceName(n);} ":" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("LabeledStatement","-","-");}

 )  }

FSTInfo Block(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=BlockStatement(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("Block","-","-");}

 )  }

FSTInfo BlockStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(2) n=Annotation(inTerminal){ replaceName(n);}] n=BlockStatementInternal(inTerminal){ replaceName(n);} {return productionEndNonTerminal("BlockStatement","-","-");}

 )  }

FSTInfo BlockStatementInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([Annotation()] [FinalOrAbstract()] "class") [n=Annotation(inTerminal){ replaceName(n);}] [n=FinalOrAbstract(inTerminal){ replaceName(n);}] n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] n=ClassOrInterfaceBody(inTerminal){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndNonTerminal("BlockClassOrInterfaceDecl","-","-");}
 |
	LOOKAHEAD( Modifiers() (FinalOrAnnotation())* Type() Id()) n=LocalVariableDeclaration(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("BlockLocalVariableDecl","-","-");}
 |
	LOOKAHEAD(3) n=AssertStatement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("BlockAssertStmt","-","-");}
 |
	LOOKAHEAD(3) n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("InnerBlockStmt","-","-");}

 )  }

FSTInfo FinalOrAbstract(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FINAL>  {return productionEndTerminal("FinalOrAbstract1","-","-","Replacement","Default",first,token);}
 |
	<ABSTRACT>  {return productionEndTerminal("FinalOrAbstract2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LocalVariableDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(2) n=Annotation(inTerminal){ replaceName(n);}] n=Modifiers(inTerminal){ replaceName(n);} (n=FinalOrAnnotation(inTerminal){ replaceName(n);})* n=Type(inTerminal){ replaceName(n);} n=VariableDeclarator(inTerminal){ replaceName(n);} ("," n=VariableDeclarator(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("LocalVariableDeclaration","-","-");}

 )  }

FSTInfo EmptyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StatementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PreIncrementExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PreIncrementStmtExp","-","-");}
 |
	n=PreDecrementExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("PreDecrementStmtExp","-","-");}
 |
	n=PrimaryExpression(inTerminal){ replaceName(n);} [n=StatementExpressionAssignment(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("AssignmentStmtExp","-","-");}

 )  }

FSTInfo StatementExpressionAssignment(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("Increment","-","-","Replacement","Default",first,token);}
 |
	"--"  {return productionEndTerminal("Decrement","-","-","Replacement","Default",first,token);}
 |
	n=AssignmentOperator(inTerminal){ replaceName(n);} n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("Assignment","-","-");}

 )  }

FSTInfo SwitchStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"switch" "(" n=Expression(inTerminal){ replaceName(n);} ")" "{" (n=SwitchStatementLabel(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("SwitchStatement","-","-");}

 )  }

FSTInfo SwitchStatementLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SwitchLabel(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=BlockStatement(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("SwitchStatementLabel","-","-");}

 )  }

FSTInfo SwitchLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"case" n=Expression(inTerminal){ replaceName(n);} ":" {return productionEndNonTerminal("CaseSwitchExp","-","-");}
 |
	"default" ":"  {return productionEndTerminal("DefaultSwitch","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumConstantName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> {return productionEndTerminal("EnumConstantName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IfStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" "(" n=Expression(inTerminal){ replaceName(n);} ")" n=Statement(inTerminal){ replaceName(n);} [LOOKAHEAD(1) n=IfStatementInternal(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("IfStatement","-","-");}

 )  }

FSTInfo IfStatementInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"else" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("IfStatementInternal","-","-");}

 )  }

FSTInfo WhileStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"while" "(" n=Expression(inTerminal){ replaceName(n);} ")" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("WhileStatement","-","-");}

 )  }

FSTInfo DoStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"do" n=Statement(inTerminal){ replaceName(n);} "while" "(" n=Expression(inTerminal){ replaceName(n);} ")" ";" {return productionEndNonTerminal("DoStatement","-","-");}

 )  }

FSTInfo ForStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" "(" n=ForStatementInternal(inTerminal){ replaceName(n);} ")" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForStatement","-","-");}

 )  }

FSTInfo ForStatementInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([Annotation()]["final"] Type() Id() ":") [LOOKAHEAD(2) n=Annotation(inTerminal){ replaceName(n);}] ["final" ] n=Type(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName(n);} ":" n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForEach","-","-");}
 |
	[n=ForInit(inTerminal){ replaceName(n);}] ";" [n=Expression(inTerminal){ replaceName(n);}] ";" [n=ForUpdate(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("ForTraditional","-","-");}

 )  }

FSTInfo VariableModifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(2) n=Annotation(true){ replaceName(n);}] ["final" ] {return productionEndTerminal("VariableModifier","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD( [ "final" ] Type() Id() ) n=LocalVariableDeclaration(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForInit1","-","-");}
 |
	n=StatementExpressionList(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForInit2","-","-");}

 )  }

FSTInfo StatementExpressionList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpression(inTerminal){ replaceName(n);} ("," n=StatementExpression(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("StatementExpressionList","-","-");}

 )  }

FSTInfo ForUpdate(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpressionList(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ForUpdate","-","-");}

 )  }

FSTInfo BreakStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"break" [n=Id(inTerminal){ replaceName(n);}] ";" {return productionEndNonTerminal("BreakStatement","-","-");}

 )  }

FSTInfo ContinueStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"continue" [n=Id(inTerminal){ replaceName(n);}] ";" {return productionEndNonTerminal("ContinueStatement","-","-");}

 )  }

FSTInfo ReturnStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"return" [n=Expression(inTerminal){ replaceName(n);}] ";" {return productionEndNonTerminal("ReturnStatement","-","-");}

 )  }

FSTInfo ThrowStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"throw" n=Expression(inTerminal){ replaceName(n);} ";" {return productionEndNonTerminal("ThrowStatement","-","-");}

 )  }

FSTInfo SynchronizedStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"synchronized" "(" n=Expression(inTerminal){ replaceName(n);} ")" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("SynchronizedStatement","-","-");}

 )  }

FSTInfo TryStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"try" [n=ResourceSpecification(inTerminal){ replaceName(n);}] n=Block(inTerminal){ replaceName(n);} (LOOKAHEAD(2) n=CatchStatement(inTerminal){ replaceName(n);})* [LOOKAHEAD(2) n=FinallyStatement(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("TryStatement","-","-");}

 )  }

FSTInfo ResourceSpecification(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=Resources(inTerminal){ replaceName(n);} [LOOKAHEAD(2) ";" ] ")" {return productionEndNonTerminal("ResourceSpecification","-","-");}

 )  }

FSTInfo Resources(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Resource(inTerminal){ replaceName(n);} (LOOKAHEAD(2) ";" n=Resource(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("Resources","-","-");}

 )  }

FSTInfo Resource(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=FinalOrAnnotation(inTerminal){ replaceName(n);})* n=Type(inTerminal){ replaceName(n);} n=VariableDeclaratorId(inTerminal){ replaceName(n);} "=" n=Expression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("Resource","-","-");}

 )  }

FSTInfo CatchStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"catch" "(" n=CatchBlockInternal(inTerminal){ replaceName(n);} ")" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("CatchStatement","-","-");}

 )  }

FSTInfo CatchBlockInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) n=FormalParameter(inTerminal){ replaceName(n);} {return productionEndNonTerminal("SingleCatching","-","-");}
 |
	n=ClassOrInterfaceType(inTerminal){ replaceName(n);} (LOOKAHEAD(2) "|" n=ClassOrInterfaceType(inTerminal){ replaceName(n);})+ n=VariableDeclaratorId(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MultipleCatching","-","-");}

 )  }

FSTInfo FinallyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"finally" n=Statement(inTerminal){ replaceName(n);} {return productionEndNonTerminal("FinallyStatement","-","-");}

 )  }

FSTInfo Annotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("@" Name() "(" ( Id() "=" | ")" )) n=NormalAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("@" Name() "(") n=SingleMemberAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation2","-","-","Replacement","Default",first,token);}
 |
	n=MarkerAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NormalAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" [n=MemberValuePairs(true){ replaceName(n);}] ")" {return productionEndTerminal("NormalAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MarkerAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} {return productionEndTerminal("MarkerAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SingleMemberAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" n=MemberValue(true){ replaceName(n);} ")" {return productionEndTerminal("SingleMemberAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValuePairs(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberValuePair(true){ replaceName(n);} ("," n=MemberValuePair(true){ replaceName(n);})* {return productionEndTerminal("MemberValuePairs","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValuePair(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} "=" n=MemberValue(true){ replaceName(n);} {return productionEndTerminal("MemberValuePair","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Annotation(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MemberValueAnnotation","-","-");}
 |
	n=MemberValueArrayInitializer(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MemberValueArrayInitl","-","-");}
 |
	n=ConditionalExpression(inTerminal){ replaceName(n);} {return productionEndNonTerminal("MemberValueConditionalExp","-","-");}

 )  }

FSTInfo MemberValueArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=MemberValueArrayInitializerInternal(true){ replaceName(n);}] "}" {return productionEndTerminal("MemberValueArrayInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValueArrayInitializerInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberValueList(true){ replaceName(n);} ["," ] {return productionEndTerminal("MemberValueArrayInitializerInternal","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValueList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberValue(true){ replaceName(n);} (LOOKAHEAD(2) "," n=MemberValue(true){ replaceName(n);})* {return productionEndTerminal("MemberValueList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AnnotationTypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" "interface" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "{" (n=AnnotationTypeMemberDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationTypeDeclaration","-","{Id}");}

 )  }

FSTInfo AnnotationTypeBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=AnnotationTypeMemberDeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("AnnotationTypeBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AnnotationTypeMemberDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Modifiers() Type() Id() "(") n=Modifiers(inTerminal){ replaceName(n);} n=Type(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "(" ")" [n=DefaultValue(inTerminal){ replaceName(n);}] ";" {return productionEndNonTerminal("AnnotationTypeMemberDeclaration1","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() ClassOrInterface()) n=Modifiers(inTerminal){ replaceName(n);} [n=FinalOrAbstract(inTerminal){ replaceName(n);}] n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] n=ClassOrInterfaceBody(inTerminal){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndNonTerminal("AnnotationInnerClassDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() "enum") n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" [n=EnumConstants(inTerminal){ replaceName(n);}] ["," ] [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("AnnotationInnerEnumDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} n=AnnotationTypeDeclaration(inTerminal){ replaceName("AnnotationTypeDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("AnnotationInnerTypeDecl","{AnnotationTypeDeclaration}","{AnnotationTypeDeclaration}");}
 |
	n=Modifiers(inTerminal){ replaceName(n);} n=FieldDeclaration(inTerminal){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("AnnotationInnerFieldDecl","{FieldDeclaration}","{FieldDeclaration}");}
 |
	";"  {return productionEndTerminal("AnnoationEmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}

 )  }

FSTInfo DefaultValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"default" n=MemberValue(inTerminal){ replaceName(n);} {return productionEndNonTerminal("DefaultValue","-","-");}

 )  }

